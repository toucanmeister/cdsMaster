Terminals unused in grammar

    COMMA
    NE


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmt stmts
    3      | stmt

    4 stmt: assign

    5 assign: varlet LET expr SEMICOLON

    6 varlet: ID

    7 expr: constant
    8     | ID
    9     | BRACKET_L expr binop expr BRACKET_R

   10 constant: floatval
   11         | intval
   12         | boolval

   13 floatval: FLOAT

   14 intval: NUM

   15 boolval: TRUEVAL
   16        | FALSEVAL

   17 binop: PLUS
   18      | MINUS
   19      | STAR
   20      | SLASH
   21      | PERCENT
   22      | LE
   23      | LT
   24      | GE
   25      | GT
   26      | EQ
   27      | OR
   28      | AND


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    BRACKET_L (258) 9
    BRACKET_R (259) 9
    COMMA (260)
    SEMICOLON (261) 5
    MINUS (262) 18
    PLUS (263) 17
    STAR (264) 19
    SLASH (265) 20
    PERCENT (266) 21
    LE (267) 22
    LT (268) 23
    GE (269) 24
    GT (270) 25
    EQ (271) 26
    NE (272)
    OR (273) 27
    AND (274) 28
    TRUEVAL (275) 15
    FALSEVAL (276) 16
    LET (277) 5
    NUM <cint> (278) 14
    FLOAT <cflt> (279) 13
    ID <id> (280) 6 8


Nonterminals, with rules where they appear

    $accept (26)
        on left: 0
    program <node> (27)
        on left: 1
        on right: 0
    stmts <node> (28)
        on left: 2 3
        on right: 1 2
    stmt <node> (29)
        on left: 4
        on right: 2 3
    assign <node> (30)
        on left: 5
        on right: 4
    varlet <node> (31)
        on left: 6
        on right: 5
    expr <node> (32)
        on left: 7 8 9
        on right: 5 9
    constant <node> (33)
        on left: 10 11 12
        on right: 7
    floatval <node> (34)
        on left: 13
        on right: 10
    intval <node> (35)
        on left: 14
        on right: 11
    boolval <node> (36)
        on left: 15 16
        on right: 12
    binop <cbinop> (37)
        on left: 17 18 19 20 21 22 23 24 25 26 27 28
        on right: 9


State 0

    0 $accept: • program $end

    ID  shift, and go to state 1

    program  go to state 2
    stmts    go to state 3
    stmt     go to state 4
    assign   go to state 5
    varlet   go to state 6


State 1

    6 varlet: ID •

    $default  reduce using rule 6 (varlet)


State 2

    0 $accept: program • $end

    $end  shift, and go to state 7


State 3

    1 program: stmts •

    $default  reduce using rule 1 (program)


State 4

    2 stmts: stmt • stmts
    3      | stmt •

    ID  shift, and go to state 1

    $default  reduce using rule 3 (stmts)

    stmts   go to state 8
    stmt    go to state 4
    assign  go to state 5
    varlet  go to state 6


State 5

    4 stmt: assign •

    $default  reduce using rule 4 (stmt)


State 6

    5 assign: varlet • LET expr SEMICOLON

    LET  shift, and go to state 9


State 7

    0 $accept: program $end •

    $default  accept


State 8

    2 stmts: stmt stmts •

    $default  reduce using rule 2 (stmts)


State 9

    5 assign: varlet LET • expr SEMICOLON

    BRACKET_L  shift, and go to state 10
    TRUEVAL    shift, and go to state 11
    FALSEVAL   shift, and go to state 12
    NUM        shift, and go to state 13
    FLOAT      shift, and go to state 14
    ID         shift, and go to state 15

    expr      go to state 16
    constant  go to state 17
    floatval  go to state 18
    intval    go to state 19
    boolval   go to state 20


State 10

    9 expr: BRACKET_L • expr binop expr BRACKET_R

    BRACKET_L  shift, and go to state 10
    TRUEVAL    shift, and go to state 11
    FALSEVAL   shift, and go to state 12
    NUM        shift, and go to state 13
    FLOAT      shift, and go to state 14
    ID         shift, and go to state 15

    expr      go to state 21
    constant  go to state 17
    floatval  go to state 18
    intval    go to state 19
    boolval   go to state 20


State 11

   15 boolval: TRUEVAL •

    $default  reduce using rule 15 (boolval)


State 12

   16 boolval: FALSEVAL •

    $default  reduce using rule 16 (boolval)


State 13

   14 intval: NUM •

    $default  reduce using rule 14 (intval)


State 14

   13 floatval: FLOAT •

    $default  reduce using rule 13 (floatval)


State 15

    8 expr: ID •

    $default  reduce using rule 8 (expr)


State 16

    5 assign: varlet LET expr • SEMICOLON

    SEMICOLON  shift, and go to state 22


State 17

    7 expr: constant •

    $default  reduce using rule 7 (expr)


State 18

   10 constant: floatval •

    $default  reduce using rule 10 (constant)


State 19

   11 constant: intval •

    $default  reduce using rule 11 (constant)


State 20

   12 constant: boolval •

    $default  reduce using rule 12 (constant)


State 21

    9 expr: BRACKET_L expr • binop expr BRACKET_R

    MINUS    shift, and go to state 23
    PLUS     shift, and go to state 24
    STAR     shift, and go to state 25
    SLASH    shift, and go to state 26
    PERCENT  shift, and go to state 27
    LE       shift, and go to state 28
    LT       shift, and go to state 29
    GE       shift, and go to state 30
    GT       shift, and go to state 31
    EQ       shift, and go to state 32
    OR       shift, and go to state 33
    AND      shift, and go to state 34

    binop  go to state 35


State 22

    5 assign: varlet LET expr SEMICOLON •

    $default  reduce using rule 5 (assign)


State 23

   18 binop: MINUS •

    $default  reduce using rule 18 (binop)


State 24

   17 binop: PLUS •

    $default  reduce using rule 17 (binop)


State 25

   19 binop: STAR •

    $default  reduce using rule 19 (binop)


State 26

   20 binop: SLASH •

    $default  reduce using rule 20 (binop)


State 27

   21 binop: PERCENT •

    $default  reduce using rule 21 (binop)


State 28

   22 binop: LE •

    $default  reduce using rule 22 (binop)


State 29

   23 binop: LT •

    $default  reduce using rule 23 (binop)


State 30

   24 binop: GE •

    $default  reduce using rule 24 (binop)


State 31

   25 binop: GT •

    $default  reduce using rule 25 (binop)


State 32

   26 binop: EQ •

    $default  reduce using rule 26 (binop)


State 33

   27 binop: OR •

    $default  reduce using rule 27 (binop)


State 34

   28 binop: AND •

    $default  reduce using rule 28 (binop)


State 35

    9 expr: BRACKET_L expr binop • expr BRACKET_R

    BRACKET_L  shift, and go to state 10
    TRUEVAL    shift, and go to state 11
    FALSEVAL   shift, and go to state 12
    NUM        shift, and go to state 13
    FLOAT      shift, and go to state 14
    ID         shift, and go to state 15

    expr      go to state 36
    constant  go to state 17
    floatval  go to state 18
    intval    go to state 19
    boolval   go to state 20


State 36

    9 expr: BRACKET_L expr binop expr • BRACKET_R

    BRACKET_R  shift, and go to state 37


State 37

    9 expr: BRACKET_L expr binop expr BRACKET_R •

    $default  reduce using rule 9 (expr)
