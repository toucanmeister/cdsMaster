
/**
 * @file node_basic.h
 *
 * Functions to allocate node structures
 * 
 * THIS FILE HAS BEEN GENERATED USING 
 * $Id: node_basic.h.xsl 14593 2006-01-31 17:09:55Z cg $.
 * DO NOT EDIT THIS FILE AS MIGHT BE CHANGED IN A LATER VERSION.
 *
 * ALL CHANGES MADE TO THIS FILE WILL BE OVERWRITTEN!
 *
 */

#ifndef _SAC_NODE_BASIC_H_
#define _SAC_NODE_BASIC_H_

#include "types.h"


#define _SAC_AST_VERSION_ "0.9"


/*****************************************************************************
 * macros and functions for N_module
 *****************************************************************************/

#define MODULE_DECLARATIONS( n) ((n)->sons.N_module->Declarations)
#define MODULE_NAME( n) ((n)->attribs.N_module->name)
extern node *TBmakeModule (char *name, node * Declarations);

/*****************************************************************************
 * macros and functions for N_decblock
 *****************************************************************************/

#define DECBLOCK_THIS( n) ((n)->sons.N_decblock->This)
#define DECBLOCK_NEXT( n) ((n)->sons.N_decblock->Next)
extern node *TBmakeDecblock (node * This, node * Next);

/*****************************************************************************
 * macros and functions for N_fundec
 *****************************************************************************/

#define FUNDEC_PARAMS( n) ((n)->sons.N_fundec->Params)
#define FUNDEC_BODY( n) ((n)->sons.N_fundec->Body)
#define FUNDEC_NAME( n) ((n)->attribs.N_fundec->Name)
extern node *TBmakeFundec (char *Name, node * Params, node * Body);

/*****************************************************************************
 * macros and functions for N_funparams
 *****************************************************************************/

#define FUNPARAMS_THIS( n) ((n)->sons.N_funparams->This)
#define FUNPARAMS_NEXT( n) ((n)->sons.N_funparams->Next)
extern node *TBmakeFunparams (node * This, node * Next);

/*****************************************************************************
 * macros and functions for N_funparam
 *****************************************************************************/

#define FUNPARAM_NAME( n) ((n)->attribs.N_funparam->Name)
#define FUNPARAM_TYPE( n) ((n)->attribs.N_funparam->Type)
extern node *TBmakeFunparam (char *Name, cvctype Type);

/*****************************************************************************
 * macros and functions for N_funbody
 *****************************************************************************/

#define FUNBODY_DECLARATIONS( n) ((n)->sons.N_funbody->Declarations)
#define FUNBODY_STATEMENTS( n) ((n)->sons.N_funbody->Statements)
extern node *TBmakeFunbody (node * Declarations, node * Statements);

/*****************************************************************************
 * macros and functions for N_vardec
 *****************************************************************************/

#define VARDEC_EXPRESSION( n) ((n)->sons.N_vardec->Expression)
#define VARDEC_NAME( n) ((n)->attribs.N_vardec->Name)
extern node *TBmakeVardec (char *Name, node * Expression);

/*****************************************************************************
 * macros and functions for N_block
 *****************************************************************************/

#define BLOCK_THIS( n) ((n)->sons.N_block->This)
#define BLOCK_NEXT( n) ((n)->sons.N_block->Next)
extern node *TBmakeBlock (node * This, node * Next);

/*****************************************************************************
 * macros and functions for N_assign
 *****************************************************************************/

#define ASSIGN_EXPRESSION( n) ((n)->sons.N_assign->Expression)
#define ASSIGN_NAME( n) ((n)->attribs.N_assign->Name)
extern node *TBmakeAssign (char *Name, node * Expression);

/*****************************************************************************
 * macros and functions for N_proccall
 *****************************************************************************/

#define PROCCALL_ARGS( n) ((n)->sons.N_proccall->Args)
#define PROCCALL_NAME( n) ((n)->attribs.N_proccall->Name)
extern node *TBmakeProccall (char *Name, node * Args);

/*****************************************************************************
 * macros and functions for N_if
 *****************************************************************************/

#define IF_CONDITION( n) ((n)->sons.N_if->Condition)
#define IF_THEN( n) ((n)->sons.N_if->Then)
#define IF_ELSE( n) ((n)->sons.N_if->Else)
extern node *TBmakeIf (node * Condition, node * Then, node * Else);

/*****************************************************************************
 * macros and functions for N_while
 *****************************************************************************/

#define WHILE_CONDITION( n) ((n)->sons.N_while->Condition)
#define WHILE_BODY( n) ((n)->sons.N_while->Body)
extern node *TBmakeWhile (node * Condition, node * Body);

/*****************************************************************************
 * macros and functions for N_dowhile
 *****************************************************************************/

#define DOWHILE_CONDITION( n) ((n)->sons.N_dowhile->Condition)
#define DOWHILE_BODY( n) ((n)->sons.N_dowhile->Body)
extern node *TBmakeDowhile (node * Condition, node * Body);

/*****************************************************************************
 * macros and functions for N_for
 *****************************************************************************/

#define FOR_START( n) ((n)->sons.N_for->Start)
#define FOR_STOP( n) ((n)->sons.N_for->Stop)
#define FOR_STEP( n) ((n)->sons.N_for->Step)
#define FOR_BODY( n) ((n)->sons.N_for->Body)
extern node *TBmakeFor (node * Start, node * Stop, node * Step, node * Body);

/*****************************************************************************
 * macros and functions for N_return
 *****************************************************************************/

#define RETURN_EXPRESSION( n) ((n)->sons.N_return->Expression)
extern node *TBmakeReturn (node * Expression);

/*****************************************************************************
 * macros and functions for N_binop
 *****************************************************************************/

#define BINOP_LEFT( n) ((n)->sons.N_binop->Left)
#define BINOP_RIGHT( n) ((n)->sons.N_binop->Right)
#define BINOP_OPERATOR( n) ((n)->attribs.N_binop->Operator)
extern node *TBmakeBinop (binop Operator, node * Left, node * Right);

/*****************************************************************************
 * macros and functions for N_monop
 *****************************************************************************/

#define MONOP_OPERAND( n) ((n)->sons.N_monop->Operand)
#define MONOP_OPERATOR( n) ((n)->attribs.N_monop->Operator)
extern node *TBmakeMonop (monop Operator, node * Operand);

/*****************************************************************************
 * macros and functions for N_cast
 *****************************************************************************/

#define CAST_EXPRESSION( n) ((n)->sons.N_cast->Expression)
#define CAST_TYPE( n) ((n)->attribs.N_cast->Type)
extern node *TBmakeCast (cvctype Type, node * Expression);

/*****************************************************************************
 * macros and functions for N_funcall
 *****************************************************************************/

#define FUNCALL_ARGS( n) ((n)->sons.N_funcall->Args)
#define FUNCALL_NAME( n) ((n)->attribs.N_funcall->Name)
extern node *TBmakeFuncall (char *Name, node * Args);

/*****************************************************************************
 * macros and functions for N_funargs
 *****************************************************************************/

#define FUNARGS_THIS( n) ((n)->sons.N_funargs->This)
#define FUNARGS_NEXT( n) ((n)->sons.N_funargs->Next)
extern node *TBmakeFunargs (node * This, node * Next);

/*****************************************************************************
 * macros and functions for N_variable
 *****************************************************************************/

#define VARIABLE_NAME( n) ((n)->attribs.N_variable->Name)
extern node *TBmakeVariable (char *Name);

/*****************************************************************************
 * macros and functions for N_intconst
 *****************************************************************************/

#define INTCONST_VALUE( n) ((n)->attribs.N_intconst->Value)
extern node *TBmakeIntconst (int Value);

/*****************************************************************************
 * macros and functions for N_floatconst
 *****************************************************************************/

#define FLOATCONST_VALUE( n) ((n)->attribs.N_floatconst->Value)
extern node *TBmakeFloatconst (float Value);

/*****************************************************************************
 * macros and functions for N_boolconst
 *****************************************************************************/

#define BOOLCONST_VALUE( n) ((n)->attribs.N_boolconst->Value)
extern node *TBmakeBoolconst (bool Value);

#endif /* _SAC_NODE_BASIC_H_ */
