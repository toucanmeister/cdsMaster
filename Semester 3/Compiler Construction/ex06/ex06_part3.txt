Effects of function overloading on semantic analysis in the CiviC compiler:
  a) Identifiers are no longer sufficient for finding functions in symbol tables, we need to store type signatures.
  b) To identify which function is being called in an expression, we need to infer the argument types.
 
Solution for a)
  The symbol table gets extended to have an optional child node for function type signatures, so that we can check types later.
  Each symbol table entry will consist of:
	- identifier string
	- (return) type
	- (optional) function type signature string
	- (optional) pointer to the next symbol table entry

  This type signature string is generated by concatenating string representations of the return type and argument types.
  A function | int f ( float x, int y ) | would get the type signature "intfloatint".
  These type signatures can be generated by traversing the function parameters nodes of a function definition with an info struct.
  The usage of strings allows us to continue using hashmaps when constructing symbol tables, by using the concatenation of the identifier and the type signature as a key.


Solution for b)
  Whenever we find a function call in an expression during context analysis, we infer the types of all arguments, 
  using the same bottom-up technique that is later used for type checking.
  
  One could also fuse context analysis and type checking to avoid duplicate work.