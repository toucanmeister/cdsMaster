int factorial( int x)
{
  int res;
  if (x <= 1) res = 1;
  else res = x * factorial( x - 1);
  return res;
}

a + b)

Fac:
  esr 1       // entering subroutine, reserve space for one local variable
  iload 0     // load x
  iloadc_1    // load 1
  ile         // compute x <= 1
  branch_f L1 // if (x <= 1) continue, else we jump to the 'else'-clause
  iloadc_1    // load 1
  istore 1    // store 1 in res
  jump L2     // jump over 'else'-clause
L1:
  isr         // iniating subroutine call
  iload 0     // load x
  iloadc_1    // load 1
  isub        // compute x - 1
  jsr 1 Fac   // call factorial( x - 1), return value goes on the stack
  iload 0     // load x
  imul        // compute x * factorial( x - 1)
  istore 1    // store result in res
L2:
  iload 1     // load res
  ireturn     // return res


c)

Fac:
  esr 1       // 2 bytes
  iload 0     // 2
  iloadc_1    // 1
  ile         // 1
  branch_f L1 // 3
  iloadc_1    // 1
  istore 1    // 2
  jump L2     // 3
L1:
  isr         // 1
  iload 0     // 2
  iloadc_1    // 1
  isub        // 1
  jsr 1 Fac   // 4
  iload 0     // 2
  imul        // 1
  istore 1    // 2
L2:
  iload 1     // 2
  ireturn     // 1
  
d)

Fac:
  esr 1       // 2 bytes
  iload 0     // 2
  iloadc_1    // 1
  ile         // 1
  branch_f 9  // 3
  iloadc_1    // 1
  istore 1    // 2
  jump 17     // 3
L1:
  isr         // 1
  iload 0     // 2
  iloadc_1    // 1
  isub        // 1
  jsr 1 -20   // 4
  iload 0     // 2
  imul        // 1
  istore 1    // 2
L2:
  iload 1     // 2
  ireturn     // 1

